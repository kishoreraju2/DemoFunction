# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    
    - name: 'Write Config & Key Files'
      run: |
        mkdir ~/.oci
        echo "[DEFAULT]" >> ~/.oci/config
        echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
        echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
        echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
        echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
        echo "key_file=~/.oci/key.pem" >> ~/.oci/config
        echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
        
    - name: 'Install OCI CLI'
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults
        echo "::add-path::/home/runner/bin"
        exec -l $SHELL
        
    - name: 'Fix Config File Permissions'
      run: |
        oci setup repair-file-permissions --file /home/runner/.oci/config
        oci setup repair-file-permissions --file /home/runner/.oci/key.pem

    # Runs a single command using the runners shell
    - name: Install Fn Cli
      run: curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Configure OCIR Registry
      run: echo ${{secrets.OCI_AUTH_TOKEN}} | docker login "iad.ocir.io" --username "orasenatdhubsred01/oracleidentitycloudservice/kishore.kumar.raju@oracle.com" --password-stdin
        

    # Runs a set of commands using the runners shell       
    - name: Deploy fn 
      run: |
        fn create context cloudnative --api-url https://functions.us-ashburn-1.oraclecloud.com --registry iad.ocir.io/orasenatdhubsred01/kishore --provider oracle
        fn use context cloudnative
        fn update context oracle.compartment-id ${{secrets.COMPARTMENT_OCID}}
        fn -v deploy --app hello-world-app --no-bump
